import { GEMINI_API_KEY } from "@env";
import { GoogleGenAI, PersonGeneration } from "@google/genai";


const ai = new GoogleGenAI({ apiKey: GEMINI_API_KEY as string });

export type ImageDataUrl = string | undefined;

export async function AiImage(prompt: string): Promise<ImageDataUrl> {
  try {
    const response = await ai.models.generateImages({
      model: "imagen-3.0-generate-002",
      prompt: prompt,
      config: {
        numberOfImages: 1,
        aspectRatio: "1:1",
        personGeneration: PersonGeneration.ALLOW_ALL,
      },
    });

    if (response.generatedImages && response.generatedImages.length > 0) {
      const generatedImage = response.generatedImages[0];

      if (generatedImage.image && response.generatedImages.length > 0) {
        const imageBytesBase64 = generatedImage.image.imageBytes;
        const mimeType = generatedImage.image.mimeType || "image/png";
        return `data:${mimeType};base64,${imageBytesBase64}`;
      } else {
        console.warn(
          "Imagen 3: Generated image data or imageBytes are missing in the response."
        );
        return undefined;
      }
    } else {
      console.warn(
        "Imagen 3: No images were generated by the API for the prompt:",
        prompt
      );
      return undefined;
    }
  } catch (error) {
    console.error("Error generating AI image with Imagen 3:", error);
    return undefined;
  }
}